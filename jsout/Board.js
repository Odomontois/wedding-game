// Generated by LiveScript 1.5.0
(function(){
  var getMasks, ref$, sortBy, objToPairs, Text, Board, out$ = typeof exports != 'undefined' && exports || this;
  getMasks = require('masks.ls').getMasks;
  ref$ = require('prelude-ls'), sortBy = ref$.sortBy, objToPairs = ref$.objToPairs;
  Text = require('text.ls').Text;
  out$.Board = Board = (function(superclass){
    var prototype = extend$((import$(Board, superclass).displayName = 'Board', Board), superclass).prototype, constructor = Board;
    importAll$(prototype, arguments[1]);
    Board.prototype.preload = function(){
      var game, name, ref$, photo, results$ = [];
      game = this.game;
      this.masks = getMasks(this);
      game.load.image('bg', game.cfg.background);
      for (name in ref$ = game.stages) {
        photo = ref$[name].photo;
        if (photo != null) {
          game.load.image("stage_" + name, "data/photos/" + photo);
        }
        results$.push(game.load.text("text_" + name, "data/texts/" + name + ".txt"));
      }
      return results$;
    };
    Board.prototype.drawStage = function(name, arg$){
      var ref$, x, y, photo, crop, mask, scale, pic;
      ref$ = arg$.at, x = ref$[0], y = ref$[1], photo = arg$.photo, crop = arg$.crop, mask = arg$.mask, scale = arg$.scale;
      pic = this.game.add.sprite(x, y, "stage_" + name);
      if (crop != null) {
        pic.crop((function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args), t;
          return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(Phaser.Rectangle, crop, function(){}));
      }
      if (scale != null) {
        x = scale[0], y = scale[1];
        pic.scale = {
          x: x,
          y: y
        };
      }
      if (mask != null) {
        this.masks[mask](pic);
      }
      pic.inputEnabled = true;
      pic.events.onInputDown.add(this.chooseStage, this);
      return pic;
    };
    Board.prototype.create = function(){
      var ordStages, i$, len$, ref$, name, stage, sprite, this$ = this;
      this.game.add.sprite(0, 0, "bg");
      this.stages = {};
      ordStages = sortBy(function(it){
        return it[1].index;
      }, objToPairs(this.game.stages));
      for (i$ = 0, len$ = ordStages.length; i$ < len$; ++i$) {
        ref$ = ordStages[i$], name = ref$[0], stage = ref$[1];
        sprite = this.drawStage(name, stage);
        this.stages[name] = sprite;
        sprite.name = name;
        stage.type = stage.video != null ? (sprite.video = stage.video, "video") : "text";
      }
    };
    Board.prototype.update = function(){
      var _, ref$, stage, results$ = [];
      for (_ in ref$ = this.stages) {
        stage = ref$[_];
        results$.push(stage.updateCrop());
      }
      return results$;
    };
    Board.prototype.showUnchosen = function(visible){
      var _, ref$, stage, results$ = [];
      visible == null && (visible = false);
      for (_ in ref$ = this.stages) {
        stage = ref$[_];
        if (stage !== this.chosen) {
          results$.push(stage.visible = visible);
        }
      }
      return results$;
    };
    Board.prototype.chooseStage = function(sprite){
      console.log(sprite);
      switch (stage.type) {
      case "text":
        return this.chooseText(sprite);
      case "video":
        return this.chooseVideo(sprite);
      }
    };
    Board.prototype.chooseVideo = function(sprite){
      return s;
    };
    Board.prototype.chooseText = function(sprite){
      var visible, this$ = this;
      if (sprite === this.chosen) {
        this.chosen = null;
        visible = true;
        sprite.text.destroy();
        return sprite.maskHandler.shrink().onComplete.add(function(){
          return this$.showUnchosen(true);
        });
      } else {
        this.chosen = sprite;
        this.showUnchosen(false);
        return sprite.maskHandler.enlarge().onComplete.add(function(){
          return this$.makeText(sprite);
        });
      }
    };
    function Board(){
      Board.superclass.apply(this, arguments);
    }
    return Board;
  }(Phaser.State, Text));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
