// Generated by LiveScript 1.5.0
(function(){
  var MaskImpl, circle, maskImpls, maskMaker, getMasks, slice$ = [].slice, out$ = typeof exports != 'undefined' && exports || this;
  MaskImpl = (function(){
    MaskImpl.displayName = 'MaskImpl';
    var prototype = MaskImpl.prototype, constructor = MaskImpl;
    function MaskImpl(state, sprite){
      var x, y, w, h;
      this.state = state;
      this.sprite = sprite;
      sprite.maskHandler = this;
      x = sprite.x, y = sprite.y, w = sprite.width, h = sprite.height;
      this.pos = {
        x: x,
        y: y,
        w: w,
        h: h
      };
      this.crop = import$({}, sprite.cropRect);
      this.mask = this.makeMask();
      this.scale = import$({}, this.sprite.scale);
      this.sprite.mask = this.mask;
    }
    Object.defineProperty(MaskImpl.prototype, 'game', {
      get: function(){
        return this.state.game;
      },
      configurable: true,
      enumerable: true
    });
    MaskImpl.prototype.tween = function(obj, to, start){
      var ref$;
      return (ref$ = this.game.add.tween(obj)).to.apply(ref$, [to].concat(slice$.call(this.tweenParams(start))));
    };
    MaskImpl.prototype.enlarge = function(start){
      var ref$, width, height, tween, this$ = this;
      start == null && (start = true);
      console.log(this.sprite._crop);
      ref$ = this.game, width = ref$.width, height = ref$.height;
      this.sprite.mask = null;
      this.mask.visible = false;
      tween = this.tween(this.sprite.cropRect, {
        x: 0,
        y: 0,
        width: width,
        height: height
      }, start);
      tween.onStart.add(function(){
        return this$.tween(this$.sprite, {
          x: 0,
          y: 0
        }, start);
      });
      tween.onStart.add(function(){
        return this$.tween(this$.sprite.scale, {
          x: 1,
          y: 1
        }, start);
      });
      return tween;
    };
    MaskImpl.prototype.shrink = function(start){
      var rest, ref$, x, y, w, h, tween, this$ = this;
      start == null && (start = true);
      rest = [1000, "Linear", true];
      ref$ = this.pos, x = ref$.x, y = ref$.y, w = ref$.w, h = ref$.h;
      tween = this.tween(this.sprite, {
        x: x,
        y: y
      }, start);
      tween.onStart.add(function(){
        return this$.tween(this$.sprite.cropRect, this$.crop, start);
      });
      tween.onStart.add(function(){
        return this$.tween(this$.sprite.scale, this$.scale, start);
      });
      tween.onComplete.add(function(){
        this$.sprite.mask = this$.mask;
        return this$.mask.visible = true;
      });
      return tween;
    };
    MaskImpl.prototype.tweenParams = function(autoStart){
      return [1000, "Linear", autoStart];
    };
    return MaskImpl;
  }());
  circle = (function(superclass){
    var prototype = extend$((import$(circle, superclass).displayName = 'circle', circle), superclass).prototype, constructor = circle;
    circle.prototype.makeMask = function(){
      var mask, ref$, x, y, width, height, scale, w, h;
      mask = this.game.add.graphics(0, 0);
      ref$ = this.sprite, x = ref$.x, y = ref$.y, width = ref$.width, height = ref$.height, scale = ref$.scale;
      w = width * scale.x;
      h = height * scale.y;
      mask.beginFill(0xffffff);
      this.ellipse = mask.drawEllipse(x + w / 2, y + h / 2, w / 2, h / 2);
      return mask;
    };
    function circle(){
      circle.superclass.apply(this, arguments);
    }
    return circle;
  }(MaskImpl));
  maskImpls = {
    circle: circle
  };
  maskMaker = curry$(function(state, maker, sprite){
    return new maker(state, sprite);
  });
  out$.getMasks = getMasks = function(state){
    var name, ref$, maker, resultObj$ = {};
    for (name in ref$ = maskImpls) {
      maker = ref$[name];
      resultObj$[name] = maskMaker(state, maker);
    }
    return resultObj$;
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
